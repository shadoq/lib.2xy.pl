{class:mobi.shad.s3lib.gfx.g3d.shaders.SimpleShader$ShaderData,name:glsl_1135.0,type:null,id:null,date:null,author:null,description:null,tags:null,color:false,normal:false,textures:0,vertex:"void main(){\n\tgl_Position = projectionMatrix * modelViewMatrix * a_position;\n}",fragment:"// chains - @P_Malin\n\nstruct C_Ray\n{\n    vec3 vOrigin;\n    vec3 vDir;\n};\n\nstruct C_HitInfo\n{\n    float fDistance;\n    float fObjectId;\n    vec3 vPos;\n};\n\nstruct C_Material\n{\n    vec3 cAlbedo;\n    float fR0;\n    float fSmoothness;\n};\n\nvec2 DistCombineUnion( const in vec2 v1, const in vec2 v2 )\n{\n    //if(v1.x < v2.x)\n    //            return v1;\n    //else\n    //            return v2;\n    return mix(v1, v2, step(v2.x, v1.x));\n}\n\nvec2 DistCombineIntersect( const in vec2 v1, const in vec2 v2 )\n{\n    return mix(v2, v1, step(v2.x,v1.x));\n}\n\nvec2 DistCombineSubstract( const in vec2 v1, const in vec2 v2 )\n{\n    return DistCombineIntersect(v1, vec2(-v2.x, v2.y));\n}\n\nvec3 DomainRepeatXZGetTile( vec3 vPos, vec2 vRepeat, out vec2 vTile )\n{\n    vec3 vResult = vPos;\n    vec2 vTilePos = (vPos.xz / vRepeat) + 0.5;\n    vTile = floor(vTilePos + 1000.0);\n    vResult.xz = (fract(vTilePos) - 0.5) * vRepeat;\n    return vResult;\n}\n\nvec3 DomainRepeatY( vec3 vPos, float fSize )\n{\n    vec3 vResult = vPos;\n    vResult.y = (fract(vPos.y / fSize + 0.5) - 0.5) * fSize;\n    return vResult;\n}\n\nfloat GetDistanceXYTorus( const in vec3 p, const in float r1, const in float r2 )\n{\n   vec2 q = vec2(length(p.xy)-r1,p.z);\n   return length(q)-r2;\n}\n\nfloat GetDistanceYZTorus( const in vec3 p, const in float r1, const in float r2 )\n{\n   vec2 q = vec2(length(p.yz)-r1,p.x);\n   return length(q)-r2;\n}\n\nfloat GetDistanceChain(vec3 vPos)\n{\n    vec3 vChainDomain = vPos;\n    \n    vChainDomain.y = fract(vChainDomain.y + 0.5) - 0.5;     \n    float fDistTorus1 = GetDistanceXYTorus(vChainDomain, 0.35, 0.1);\n    \n    vChainDomain.y = fract(vChainDomain.y + 1.0) - 0.5;     \n    float fDistTorus2 = GetDistanceYZTorus(vChainDomain, 0.35, 0.1);\n    \n    float fDist = min(fDistTorus1, fDistTorus2);\n\n    return fDist;\n}\n\nfloat GetDistanceCylinderY(vec3 vPos, float r)\n{\n    return length(vPos.xz) - r;\n}\n\nvec2 GetDistanceScene( const in vec3 vPos )\n{             \n    vec2 vDistFloor = vec2(vPos.y + 0.5, 1.0);\n    \n    vec2 vChainTile;\n    vec3 vChainDomain = vPos;\n    float fRepeat = 4.0;\n    vChainDomain.xz += fRepeat / 2.0;\n    vChainDomain = DomainRepeatXZGetTile(vChainDomain, vec2(fRepeat), vChainTile);\n    float fSpeed = (sin(vChainTile.y + vChainTile.x) + 1.1) * 0.5;\n    vChainDomain.y += sin(iTime * fSpeed);\n    vec2 vDistChain = vec2( GetDistanceChain(vChainDomain), 100.0);\n\n    vec2 vDistChainHole = vec2( GetDistanceCylinderY(vChainDomain, 0.7), 2.0);\n    \n    vec2 vResult = vDistFloor;\n    vResult = DistCombineSubstract( vResult, vDistChainHole );\n    vResult = DistCombineUnion( vResult, vDistChain );\n       return vResult;\n}\n\nC_Material GetObjectMaterial( in float fObjId, in vec3 vPos )\n{\n    C_Material mat;\n\n    if(fObjId < 1.5)\n    {\n        // floor\n        mat.fR0 = 0.02;\n        mat.fSmoothness = 0.8;\n        mat.cAlbedo = vec3(0.8, 1.0, 0.8);\n    }\n    else\n    if(fObjId < 2.5)\n    {\n        // hole interior\n        mat.fR0 = 0.0;\n        mat.fSmoothness = 0.0;\n        mat.cAlbedo = vec3(0.8, 0.8, 0.8);\n    }\n    else\n    {\n        // chain\n        mat.fR0 = 0.2;\n        mat.fSmoothness = 0.2;\n        mat.cAlbedo = vec3(0.2, 0.19, 0.16);\n    }\n    \n    return mat;\n}\n\nvec3 GetSkyGradient( const in vec3 vDir )\n{\n    float fBlend = clamp(vDir.y, 0.0, 1.0);\n    return mix(vec3(0.8, 0.9, 1.0), vec3(0.4, 0.2, 0.3), fBlend);\n}\n\nvec3 GetLightPos()\n{\n    return vec3(sin(iTime), 1.5 + cos(iTime * 1.231), cos(iTime * 1.1254));\n}\n\nvec3 GetLightCol()\n{\n    return vec3(18.0, 18.0, 6.0);\n}\n\nvec3 GetAmbientLight(const in vec3 vNormal)\n{\n    return GetSkyGradient(vNormal);\n}\n\nvoid ApplyAtmosphere(inout vec3 col, const in C_Ray ray, const in C_HitInfo intersection)\n{\n    // fog\n    float fFogDensity = 0.195;\n    float fFogAmount = exp(intersection.fDistance * -fFogDensity);\n    vec3 cFog = GetSkyGradient(ray.vDir);\n    col = mix(cFog, col, fFogAmount);\n    \n    // glare from light (a bit hacky - use length of closest approach from ray to light)\n    \n    vec3 vToLight = GetLightPos() - ray.vOrigin;\n    float fDot = dot(vToLight, ray.vDir);\n    fDot = clamp(fDot, 0.0, intersection.fDistance);\n       \n    vec3 vClosestPoint = ray.vOrigin + ray.vDir * fDot;\n    float fDist = length(vClosestPoint - GetLightPos());\n    col += GetLightCol() * 0.01/ (fDist * fDist);   \n}\n\nvec3 GetSceneNormal( const in vec3 vPos )\n{\n    // tetrahedron normal  \n    \n    float fDelta = 0.01;\n    \n    vec3 vOffset1 = vec3( fDelta, -fDelta, -fDelta);\n    vec3 vOffset2 = vec3(-fDelta, -fDelta,  fDelta);\n    vec3 vOffset3 = vec3(-fDelta,  fDelta, -fDelta);\n    vec3 vOffset4 = vec3( fDelta,  fDelta,  fDelta);\n    \n    float f1 = GetDistanceScene( vPos + vOffset1 ).x;\n    float f2 = GetDistanceScene( vPos + vOffset2 ).x;\n    float f3 = GetDistanceScene( vPos + vOffset3 ).x;\n    float f4 = GetDistanceScene( vPos + vOffset4 ).x;\n    \n    vec3 vNormal = vOffset1 * f1 + vOffset2 * f2 + vOffset3 * f3 + vOffset4 * f4;\n    \n    return normalize( vNormal );\n}\n\n// This is an excellent resource on ray marching -> http://www.iquilezles.org/www/articles/distfunctions/distfunctions.htm\nvoid Raymarch( const in C_Ray ray, out C_HitInfo result, const float fMaxDist, const int maxIter )\n{            \n    const float fEpsilon = 0.091;\n    const float fStartDistance = 0.1;\n    \n    result.fDistance = fStartDistance; \n    result.fObjectId = 0.0;\n              \n    for(int i=0;i<=256;i++)                  \n    {\n        result.vPos = ray.vOrigin + ray.vDir * result.fDistance;\n        vec2 vSceneDist = GetDistanceScene( result.vPos );\n        result.fObjectId = vSceneDist.y;\n        \n        // abs allows backward stepping - should only be necessary for non uniform distance functions\n        if((abs(vSceneDist.x) <= fEpsilon) || (result.fDistance >= fMaxDist) || (i > maxIter))\n        {\n            break;\n        }                            \n        \n        result.fDistance = result.fDistance + vSceneDist.x;                          \n    }\n    \n    \n    if(result.fDistance >= fMaxDist)\n    {\n        result.fObjectId = 0.0;\n        result.fDistance = 1000.0;\n    }\n}\n\nfloat GetShadow( const in vec3 vPos, const in vec3 vLightDir, const in float fLightDistance )\n{\n    C_Ray shadowRay;\n    shadowRay.vDir = vLightDir;\n    shadowRay.vOrigin = vPos;\n    \n    C_HitInfo shadowIntersect;\n    Raymarch(shadowRay, shadowIntersect, fLightDistance, 32);\n                       \n    return step(0.0, shadowIntersect.fDistance) * step(fLightDistance, shadowIntersect.fDistance );             \n}\n\n// http://en.wikipedia.org/wiki/Schlick's_approximation\nfloat Schlick( const in vec3 vNormal, const in vec3 vView, const in float fR0, const in float fSmoothFactor)\n{\n    float fDot = dot(vNormal, -vView);\n    fDot = min(max((1.0 - fDot), 0.0), 1.0);\n    float fDot2 = fDot * fDot;\n    float fDot5 = fDot2 * fDot2 * fDot;\n    return fR0 + (1.0 - fR0) * fDot5 * fSmoothFactor;\n}\n\nfloat GetDiffuseIntensity(const in vec3 vLightDir, const in vec3 vNormal)\n{\n    return max(0.0, dot(vLightDir, vNormal));\n}\n\nfloat GetBlinnPhongIntensity(const in C_Ray ray, const in C_Material mat, const in vec3 vLightDir, const in vec3 vNormal)\n{             \n    vec3 vHalf = normalize(vLightDir - ray.vDir);\n    float fNdotH = max(0.0, dot(vHalf, vNormal));\n\n    float fSpecPower = exp2(4.0 + 6.0 * mat.fSmoothness);\n    float fSpecIntensity = (fSpecPower + 2.0) * 0.125;\n    \n    return pow(fNdotH, fSpecPower) * fSpecIntensity;\n}\n\n// use distance field to evaluate ambient occlusion\nfloat GetAmbientOcclusion(const in C_Ray ray, const in C_HitInfo intersection, const in vec3 vNormal)\n{\n    vec3 vPos = intersection.vPos;\n\n    float fAmbientOcclusion = 1.0;\n\n    float fDist = 0.0;\n    for(int i=0; i<=5; i++)\n    {\n        fDist += 0.1;\n\n        vec2 vSceneDist = GetDistanceScene(vPos + vNormal * fDist);\n        \n        fAmbientOcclusion *= 1.0 - max(0.0, (fDist - vSceneDist.x) * 0.2 / fDist );            \n    }\n\n    return fAmbientOcclusion;\n}\n\nvec3 GetObjectLighting(const in C_Ray ray, const in C_HitInfo intersection, const in C_Material material, const in vec3 vNormal, const in vec3 cReflection)\n{\n    vec3 cScene ;\n    \n    vec3 vLightPos = GetLightPos();\n    vec3 vToLight = vLightPos - intersection.vPos;\n    vec3 vLightDir = normalize(vToLight);\n    float fLightDistance = length(vToLight);\n    \n    float fAttenuation = 1.0 / (fLightDistance * fLightDistance);\n\n    float fShadowBias = 0.1;    \n    float fShadowFactor = GetShadow( intersection.vPos + vLightDir * fShadowBias, vLightDir, fLightDistance - fShadowBias );\n    vec3 vIncidentLight = GetLightCol() * fShadowFactor * fAttenuation;\n    \n    vec3 vDiffuseLight = GetDiffuseIntensity( vLightDir, vNormal ) * vIncidentLight;\n    \n    float fAmbientOcclusion = GetAmbientOcclusion(ray, intersection, vNormal);\n    vec3 vAmbientLight = GetAmbientLight(vNormal) * fAmbientOcclusion;\n    \n    vec3 vDiffuseReflection = material.cAlbedo * (vDiffuseLight + vAmbientLight);\n    \n    vec3 vSpecularReflection = cReflection * fAmbientOcclusion;\n               \n    vSpecularReflection += GetBlinnPhongIntensity( ray, material, vLightDir, vNormal ) * vIncidentLight;\n               \n    float fFresnel = Schlick(vNormal, ray.vDir, material.fR0, material.fSmoothness * 0.9 + 0.1);\n    cScene = mix(vDiffuseReflection , vSpecularReflection, fFresnel);\n    \n    return cScene;\n}\n\nvec3 GetSceneColourSimple( const in C_Ray ray )\n{\n    C_HitInfo intersection;\n    Raymarch(ray, intersection, 16.0, 32);\n               \n    vec3 cScene;\n    \n    if(intersection.fObjectId < 0.5)\n    {\n        cScene = GetSkyGradient(ray.vDir);\n    }\n    else\n    {\n        C_Material material = GetObjectMaterial(intersection.fObjectId, intersection.vPos);\n        vec3 vNormal = GetSceneNormal(intersection.vPos);\n        \n        // use sky gradient instead of reflection\n        vec3 cReflection = GetSkyGradient(reflect(ray.vDir, vNormal));\n        \n        // apply lighting\n        cScene = GetObjectLighting(ray, intersection, material, vNormal, cReflection );\n    }\n    \n    ApplyAtmosphere(cScene, ray, intersection);\n    \n    return cScene;\n}\n\n\nvec3 GetSceneColour( const in C_Ray ray )\n{                                                             \n    C_HitInfo intersection;\n    Raymarch(ray, intersection, 30.0, 256);\n               \n    vec3 cScene;\n    \n    if(intersection.fObjectId < 0.5)\n    {\n        cScene = GetSkyGradient(ray.vDir);\n    }\n    else\n    {\n        C_Material material = GetObjectMaterial(intersection.fObjectId, intersection.vPos);\n        vec3 vNormal = GetSceneNormal(intersection.vPos);\n        \n        vec3 cReflection;\n        //if((material.fSmoothness + material.fR0) < 0.01)\n        //{\n        //  // use sky gradient instead of reflection\n        //  vec3 cReflection = GetSkyGradient(reflect(ray.vDir, vNormal));          \n        //}\n        //else\n        {\n            // get colour from reflected ray\n            float fSepration = 0.05;\n            C_Ray reflectRay;\n            reflectRay.vDir = reflect(ray.vDir, vNormal);\n            reflectRay.vOrigin = intersection.vPos + reflectRay.vDir * fSepration;\n                    \n            cReflection = GetSceneColourSimple(reflectRay);                                                         \n        }\n        \n        // apply lighting\n        cScene = GetObjectLighting(ray, intersection, material, vNormal, cReflection );\n    }\n    \n    ApplyAtmosphere(cScene, ray, intersection);\n    \n    return cScene;\n}\n\nvoid GetCameraRay( const in vec3 vPos, const in vec3 vForwards, const in vec3 vWorldUp, out C_Ray ray)\n{\n    vec2 vUV = ( gl_FragCoord.xy / iResolution.xy );\n    vec2 vViewCoord = vUV * 2.0 - 1.0;\n    \n    float fRatio = iResolution.x / iResolution.y;\n    \n    vViewCoord.y /= fRatio;                              \n    \n    ray.vOrigin = vPos;\n    \n    vec3 vRight = normalize(cross(vForwards, vWorldUp));\n    vec3 vUp = cross(vRight, vForwards);\n           \n    ray.vDir = normalize( vRight * vViewCoord.x + vUp * vViewCoord.y + vForwards);           \n}\n\nvoid GetCameraRayLookat( const in vec3 vPos, const in vec3 vInterest, out C_Ray ray)\n{\n    vec3 vForwards = normalize(vInterest - vPos);\n    vec3 vUp = vec3(0.0, 1.0, 0.0);\n    \n    GetCameraRay(vPos, vForwards, vUp, ray);\n}\n\nvec3 OrbitPoint( const in float fHeading, const in float fElevation )\n{\n    return vec3(sin(fHeading) * cos(fElevation), sin(fElevation), cos(fHeading) * cos(fElevation));\n}\n\nvec3 Tonemap( const in vec3 cCol )\n{\n    // simple Reinhard tonemapping operator\n    \n    return cCol / (1.0 + cCol);\n}\n\nvoid main( void )\n{\n    C_Ray ray;\n    \n    //GetCameraRayLookat( OrbitPoint(5.0, 0.0) * 8.0, vec3(0.0, 0.0, 0.0), ray);\n    GetCameraRayLookat(vec3(0.0, 2.0, -5.0), vec3(0.0, 0.0, 0.0), ray);\n    \n    vec3 cScene = GetSceneColour( ray );\n    \n    float fExposure = 1.5;\n    gl_FragColor = vec4( Tonemap(cScene * fExposure), 1.0 );\n}\n"}
{class:mobi.shad.s3lib.gfx.g3d.shaders.SimpleShader$ShaderData,name:glsl_20293.0,type:null,id:null,date:null,author:null,description:null,tags:null,color:false,normal:false,textures:0,vertex:"void main(){\n\tgl_Position = projectionMatrix * modelViewMatrix * a_position;\n}",fragment:"// Created by inigo quilez - iq/2013 : https://www.shadertoy.com/view/4dl3zn\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Messed up by Weyland\n\n#define time iGlobalTime * 1\n\nvoid main(void)\n{\n    vec2 surfacePosition = -1.0 + 2.0 * gl_FragCoord.xy / iResolution.xy;\n    surfacePosition.x *= iResolution.x / iResolution.y;\n\n    \n    vec2 uv = surfacePosition;\n    // background    \n//  vec3 color = vec3(0.9 + 0.2*uv.y);\n    vec3 color = vec3(1.0);\n\n    // bubbles  \n    for( int i=0; i<64; i++ )\n    {\n        // bubble seeds\n        float pha =      sin(float(i)*546.13+1.0)*0.5 + 0.5;\n        float siz = pow( sin(float(i)*651.74+5.0)*0.5 + 0.5, 4.0 );\n        float pox =      sin(float(i)*321.55+4.1) * iResolution.x / iResolution.y;\n\n        // buble size, position and color\n        float rad = 0.1 + 0.5*siz+sin(iTime/6.+pha*500.+siz)/20.;\n        vec2  pos = vec2( pox+sin(iTime/10.+pha+siz), -1.0-rad + (2.0+2.0*rad)\n                         *mod(pha+0.1*(iTime/5.)*(0.2+0.8*siz),1.0));\n        float dis = length( uv - pos );\n        vec3  col = mix( vec3(0.194*sin(iTime/6.0),0.3,0.0), \n                        vec3(1.1*sin(iTime/9.0),0.4,0.8), \n                        0.5+0.5*sin(float(i)*1.2+1.9));\n              //col+= 8.0*smoothstep( rad*0.95, rad, dis );\n        \n        // render\n        float f = length(uv-pos)/rad;\n        f = sqrt(clamp(1.0-f*f,0.0,1.0));\n        color -= col.zyx *(1.0-smoothstep( rad*0.95, rad, dis )) * f;\n    }\n\n    // vigneting    \n    color *= sqrt(1.5-0.5*length(uv));\n\n    gl_FragColor = vec4(color,1.0);\n}"}
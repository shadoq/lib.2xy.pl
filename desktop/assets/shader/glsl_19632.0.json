{class:mobi.shad.s3lib.gfx.g3d.shaders.SimpleShader$ShaderData,name:glsl_19632.0,type:null,id:null,date:null,author:null,description:null,tags:null,color:false,normal:false,textures:0,vertex:"void main(){\n\tgl_Position = projectionMatrix * modelViewMatrix * a_position;\n}",fragment:"// This should be like CPC colors. Maybe..\n\nconst vec2 chunkyRes = vec2(16.0, 16.0); // CPC Mode 0\n\nfloat angle = 0.0;\nfloat zoom = 1.0;\n\n#define NO_ROTOZOOM\n\nvoid main( void ) {\n\n    #ifndef NO_ROTOZOOM\n        angle = sin(0.2 * iTime) * 2.5;\n        zoom = sin(0.5*iTime) * 0.75 + 1.0;\n    #endif\n\n    vec2 truePos = (gl_FragCoord.xy / iResolution.xy - 0.03) * zoom;\n    vec2 position = floor((gl_FragCoord.xy / iResolution.xy) * chunkyRes * zoom) / chunkyRes;\n    position = vec2(position.x * cos(angle) - position.y * sin(angle), position.x * sin(angle) + position.y * cos(angle));\n    float color = 0.0;\n    color += sin( position.x * cos( iTime / 15.0 ) * 80.0 ) + cos( position.y * cos( iTime / 15.0 ) * 10.0 );\n    color += sin( position.y * sin( iTime / 10.0 ) * 40.0 ) + cos( position.x * sin( iTime / 25.0 ) * 40.0 );\n    color += sin( position.x * sin( iTime / 5.0 ) * 10.0 ) + sin( position.y * sin( iTime / 35.0 ) * 80.0 );\n    color *= sin( iTime / 10.0 ) * 0.5 + 2.0;\n    \n    vec3 rgb = vec3(color, color * 0.5, sin( color + iTime / 3.0 ) * 0.75 );\n    vec3 cpcRgb = floor(rgb * 2.0) / 2.0;\n    cpcRgb*= pow((1.0 - (length(position - truePos) * chunkyRes.x)), 3.0);\n    gl_FragColor = vec4(cpcRgb , 1.0 );\n\n}"}
{class:mobi.shad.s3lib.gfx.g3d.shaders.SimpleShader$ShaderData,name:glsl_24796.0,type:null,id:null,date:null,author:null,description:null,tags:null,color:false,normal:false,textures:0,vertex:"void main(){\n\tgl_Position = projectionMatrix * modelViewMatrix * a_position;\n}",fragment:"#ifdef GL_ES\nprecision highp float;\n#endif\n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n\nfloat pi = 3.141592;\n\nfloat hash(float n) \n{ \n    return fract(sin(n)*43758.5453123); \n}\n\nfloat noise2(in vec2 x)\n{\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    \n    float n = p.x + p.y*157.0;\n    return mix(mix(hash(n+0.0), hash(n+1.0),f.x), mix(hash(n+157.0), hash(n+158.0),f.x),f.y);\n}\n\nfloat noise3(in vec3 x)\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    \n    float n = p.x + p.y*157.0 + 113.0*p.z;\n    return mix(\n        mix(mix(hash(n+  0.0), hash(n+  1.0),f.x), mix(hash(n+157.0), hash(n+158.0),f.x),f.y),\n        mix(mix(hash(n+113.0), hash(n+114.0),f.x), mix(hash(n+270.0), hash(n+271.0),f.x),f.y),f.z);\n}\n\nvec2 r(vec2 v,float y)\n{\n    return cos(y)*v+sin(y)*vec2(-v.y,v.x);\n}\n\nvec3 smin(vec3 a, vec3 b)\n{\n    if (a.x < b.x)\n        return a;\n    \n    return b;\n}\n\nvec3 smax(vec3 a, vec3 b)\n{\n    if (a.x > b.x)\n        return a;\n    \n    return b;\n}\n\nvec3 sinv(vec3 a)\n{\n    return vec3(-a.x, a.y, a.z);    \n}\n\nfloat sdSphere(vec3 p, float s)\n{\n  return length(p)-s;\n}\n\nfloat sdBox(vec3 p, vec3 b, float r)\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) +\n         length(max(d,0.0)) - r;\n}\n\nfloat sdCylinder( vec3 p, vec3 c )\n{\n  return length(p.xz-c.xy)-c.z;\n}\n\nfloat smoothmax( float a, float b, float k )\n{\n    return -log(exp(k*a) + exp(k*b))/-k;\n}\n\nfloat smoothmin( float a, float b, float k )\n{\n    return -log(exp(-k*a) + exp(-k*b))/k;\n}\n\nfloat cylsphere(vec3 p)\n{\n    float d = max(sdCylinder(p, vec3(0.0, 0.0, 0.04)), sdBox(p, vec3(0.3), 0.0));\n    d = smoothmin(d, sdSphere(p+vec3(0.0, 0.35, 0.0), 0.08), 48.0);\n    d = smoothmin(d, sdSphere(p-vec3(0.0, 0.35, 0.0), 0.08), 48.0);\n    return d;\n}\n\n\n\nvec3 greeble(vec3 p, float findex, float phase)\n{\n    const int indexCount = 6;\n    int index = int(findex * float(indexCount));\n    p.y -= phase * 0.2 - 0.2;\n    \n        \n    return vec3(sdBox(p, vec3(0.4), 0.025), 10.0, 0.0);\n}\n\nvec3 f( vec3 p )\n{\n    ivec3 h = ivec3(p+1337.0);\n    float hash = noise2(vec2(h.xz));\n    h = ivec3(p+42.0);\n    float phase = noise2(vec2(h.xz));\n    vec3 q = p;\n    q.xz = mod(q.xz, 1.0);\n    q -= 0.5;\n    return greeble(q, hash, phase);\n}\n\nvec3 colorize(float index)\n{\n    if (index == 0.0)\n        return vec3(0.4, 0.6, 0.2);\n    \n    if (index == 1.0)\n        return vec3(0.6, 0.3, 0.2);\n    \n    if (index == 2.0)\n        return vec3(1.0, 0.8, 0.5);\n    \n    if (index == 3.0)\n        return vec3(0.9, 0.2, 0.6);\n    \n    if (index == 4.0)\n        return vec3(0.3, 0.6, 0.7);\n    \n    if (index == 5.0)\n        return vec3(1.0, 1.0, 0.3);\n    \n    if (index == 6.0)\n        return vec3(0.7, 0.5, 0.7);\n    \n    if (index == 7.0)\n        return vec3(0.4, 0.3, 0.4);\n    \n    if (index == 8.0)\n        return vec3(0.8, 0.3, 0.2);\n    \n    if (index == 9.0)\n        return vec3(0.5, 0.8, 0.2);\n    \n    return vec3(index / 10.0);\n}\n\nfloat ao(vec3 v, vec3 n) \n{\n    const int ao_iterations = 10;\n    const float ao_step = 0.2;\n    const float ao_scale = 0.75;\n    \n    float sum = 0.0;\n    float att = 1.0;\n    float len = ao_step;\n    \n    for (int i = 0; i < ao_iterations; i++)\n    {\n        sum += (len - f(v + n * len).x) * att;      \n        len += ao_step;     \n        att *= 0.5;\n    }\n    \n    return 1.0 - max(sum * ao_scale, 0.0);\n}\n\nvoid main( void ) {\n    gl_FragColor.xyz = vec3(0);\n    \n    vec3 q = vec3((gl_FragCoord.xy / resolution.xy - 0.5), 1.0);     \n    float vignette = 1.0 - length(q.xy);\n    q.x *= iResolution.x / iResolution.y;\n    q.y -= 0.5;\n    vec3 p = vec3(0, 0.0, -10.0);\n    q = normalize(q);\n    q.xz = r(q.xz, iTime * 0.1);\n    p.y += 2.5;\n    p.z -= iTime*0.5;\n    \n    float t=0.0;\n    vec3 d = vec3(0);\n    float steps = 0.0;\n    const float maxSteps = 64.0;\n    for (float tt = 0.0; tt < maxSteps; ++tt)\n    {\n        d = f(p+q*t);\n        t += d.x*0.45;\n        if(!(t<=50.0)||d.x>=0.0001)\n        {\n            break;\n        }\n        steps = tt;\n    }\n\n    vec3 glow = vec3(1.1, 1.1, 1.0);\n    vec3 fog = vec3(0.7, 0.75, 0.8);\n    vec3 color = fog;\n\n    if (t <= 50.0)\n    {\n        vec3 hit = p+q*t;\n\n        vec2 e = vec2(0.001, 0.00);\n        vec3 normal= vec3( f(hit + e.xyy).x - f(hit - e.xyy).x, f(hit + e.yxy).x - f(hit - e.yxy).x, f(hit + e.yyx).x - f(hit - e.yyx).x) / (2.0 * e.x);\n\n        normal= normalize(normal);\n    \n        float fao = ao(hit, normal);\n        vec3 ldir = normalize(vec3(1.0, 1.0, -1.0));\n        vec3 light = (0.5 * fog.rgb + vec3(0.5 * fao * abs(dot(normal, ldir)))) * colorize(d.y); // diffuse\n        light += (1.0 - t / 50.0) * vec3(fao * pow(1.0 - abs(dot(normal, q)), 4.0)); // rim\n        q = reflect(q, normal);\n        light += fao * vec3(pow(abs(dot(q, ldir)), 16.0)); // specular\n        color = min(vec3(1), light);\n        color *= fao;\n    }\n    \n    float luma = dot(color.rgb, vec3(0.3, 0.5, 0.2));\n    color = mix(color, 1.0 * luma * vec3(1.0, 0.9, 0.5), 2.0 * max(0.0, luma-0.5)); // yellow highlights\n    color = mix(color, 1.0 * luma * vec3(0.2, 0.5, 1.0), 2.0 * max(0.0, 0.5-luma)); // blue shadows\n    //color = mix(color, glow, 0.8 * pow(steps / 90.0, 8.0)); // glow\n    color = mix(color, fog, pow(min(1.0, t / 50.0), 0.5)); // fog\n    color = pow(color, vec3(0.8)); // gamma\n    color = smoothstep(0.0, 1.0, color); // contrast\n    color *= pow(vignette + 0.3, 0.5); // vignette\n    gl_FragColor = vec4(color, 1.0);\n}"}
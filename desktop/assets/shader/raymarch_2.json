{class:mobi.shad.s3lib.gfx.g3d.shaders.SimpleShader$ShaderData,name:raymarch_2,type:null,id:null,date:null,author:null,description:null,tags:null,color:false,normal:false,textures:0,vertex:"void main(){\n\tgl_Position = projectionMatrix * modelViewMatrix * a_position;\n}",fragment:"\n//\n// Camera calcualte RayMatch Demo ...\n//\n\n#define CAMERA_MODE 4\n\nstruct Camera {\n    vec3 pos;\n    vec3 target;\n    vec3 up;\n    vec3 dir;\n    vec3 side;\n    float focus;\n};\n\nCamera cameraSetup();\n\nvoid main() {\n    vec2 pos=(gl_FragCoord.xy * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 uv=gl_FragCoord.xy/iResolution.xy;\n    vec3 outColor=vec3(0.0, 0.0, 0.0);\n    \n    Camera cam=cameraSetup();\n\n    vec3 rayDir=normalize(cam.side * pos.x + cam.up * pos.y + cam.dir * cam.focus);\n    vec3 ray=cam.pos;    \n\n    outColor=normalize(rayDir);\n    \n    gl_FragColor=vec4(outColor.r, outColor.g, outColor.b, 1.0);\n}\n\n\n//\n// Setup Camera\n//\nCamera cameraSetup()\n{\n    Camera cam=Camera(vec3(0.0), vec3(0.0), vec3(0.0), vec3(0.0), vec3(0.0), 1.0);\n    //\n    // Camera config\n    //\n    #if CAMERA_MODE==0\n        cam.pos=vec3(4.0, 2.0, 5.0);\n        cam.target=vec3(0.0, 0.0, 0.0);\n    #elif CAMERA_MODE==1\n        cam.pos=vec3(8.0, 4.0, 8.0);\n        cam.target=vec3(0.0, 0.0, 0.0);\n    #elif CAMERA_MODE==2\n        cam.pos=vec3(0.05, 0.05, 0.1);\n        cam.target=vec3(0.0, 0.1, 0.0);\n    #elif CAMERA_MODE==3\n        cam.pos=vec3(iMouse.x, iMouse.y, 5.0);\n        cam.target=vec3(0.0, 0.0, 0.0);\n    #elif CAMERA_MODE==4\n        cam.pos=vec3(-sin(iTime / 10.0) * 5.0, 5, cos(iTime / 10.0) * 5.0);\n        cam.target=vec3(0.0, 0.0, 0.0);\n    #elif CAMERA_MODE==5\n        cam.pos=vec3(0.0, 1.2, 0.0);\n        cam.target=vec3(-sin(iTime / 10.0) * 5.0, cos(iTime / 4.0) * 3.0, cos(iTime / 10.0) * 5.0);\n    #else\n        cam.pos=vec3(cos(iTime * 0.5) * 4., 3. + sin(iTime * 0.5) * 3., 4.0);\n        cam.target=vec3(0.0, 0.0, 0.0);\n    #endif\n\n    //\n    // Calculate camera target\n    //\n    cam.up=normalize(vec3(0.0, 1.0, 0.0));\n    cam.dir=normalize(cam.target - cam.pos);\n    cam.side=cross(cam.dir, cam.up);\n    cam.focus=1.8;\n   \n    return cam;\n}"}
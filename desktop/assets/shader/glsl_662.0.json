{class:mobi.shad.s3lib.gfx.g3d.shaders.SimpleShader$ShaderData,name:glsl_662.0,type:null,id:null,date:null,author:null,description:null,tags:null,color:false,normal:false,textures:0,vertex:"void main(){\n\tgl_Position = projectionMatrix * modelViewMatrix * a_position;\n}",fragment:"float h(vec3 q)\n{\n    float f=1.*distance(q,vec3(cos(iTime)+sin(iTime*.2),.3,2.+cos(iTime*.5)*.5));\n    f*=distance(q,vec3(-cos(iTime*.7),.3,2.+sin(iTime*.5)));\n    f*=distance(q,vec3(-sin(iTime*.2)*.5,sin(iTime),2.));\n    f*=cos(q.y)*cos(q.x)-.1-cos(q.z*7.+iTime*7.)*cos(q.x*3.)*cos(q.y*4.)*.1;\n    return f;\n}\n\nvoid main()\n{\n    vec2 p = -1.0 + 2.0 * gl_FragCoord.xy / iResolution.xy;\n    vec3 o=vec3(p.x,p.y*1.25-0.3,0.);\n    vec3 d=vec3(p.x+cos(iTime)*0.3,p.y,1.)/64.;\n    vec4 c=vec4(0.);\n    float t=0.;\n    for(int i=0;i<75;i++)\n    {\n        if(h(o+d*t)<.4)\n        {\n            t-=5.;\n            for(int j=0;j<5;j++)\n            {\n                if(h(o+d*t)<.4)\n                    break;\n                t+=1.;\n            }\n            vec3 e=vec3(.01,.0,.0);\n            vec3 n=vec3(.0);\n            n.x=h(o+d*t)-h(vec3(o+d*t+e.xyy));\n            n.y=h(o+d*t)-h(vec3(o+d*t+e.yxy));\n            n.z=h(o+d*t)-h(vec3(o+d*t+e.yyx));\n            n=normalize(n);\n            c+=max(dot(vec3(.0,.0,-.5),n),.0)+max(dot(vec3(.0,-.5,.5),n),.0)*.5;\n            break;\n        }\n        t+=5.;\n    }\n    gl_FragColor=c+vec4(.1,.2,.5,1.)*(t*.025);\n}"}
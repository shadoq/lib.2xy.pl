{class:mobi.shad.s3lib.gfx.g3d.shaders.SimpleShader$ShaderData,name:glsl_386.0,type:null,id:null,date:null,author:null,description:null,tags:null,color:false,normal:false,textures:0,vertex:"void main(){\n\tgl_Position = projectionMatrix * modelViewMatrix * a_position;\n}",fragment:"//Object A (tunnel)\nfloat oa(vec3 q)\n{\n return cos(q.x)+cos(q.y*1.5)+cos(q.z)+cos(q.y*20.)*.05;\n}\n\n//Object B (ribbon)\nfloat ob(vec3 q)\n{\n return length(max(abs(q-vec3(cos(q.z*1.5)*.3,-.5+cos(q.z)*.2,.0))-vec3(.125,.02,iTime+3.),vec3(.0)));\n}\n\n//Scene\nfloat o(vec3 q)\n{\n return min(oa(q),ob(q));\n}\n\n//Get Normal\nvec3 gn(vec3 q)\n{\n vec3 f=vec3(.01,0,0);\n return normalize(vec3(o(q+f.xyy),o(q+f.yxy),o(q+f.yyx)));\n}\n\n//MainLoop\nvoid main(void)\n{\n vec2 p = -1.0 + 2.0 * gl_FragCoord.xy / iResolution.xy;\n p.x *= iResolution.x/iResolution.y;\n \n vec4 c=vec4(1.0);\n vec3 org=vec3(sin(iTime)*.5,cos(iTime*.5)*.25+.25,iTime),dir=normalize(vec3(p.x*1.6,p.y,1.0)),q=org,pp;\n float d=.0;\n\n //First raymarching\n for(int i=0;i<64;i++)\n {\n  d=o(q);\n  q+=d*dir;\n }\n pp=q;\n float f=length(q-org)*0.02;\n\n //Second raymarching (reflection)\n dir=reflect(dir,gn(q));\n q+=dir;\n for(int i=0;i<64;i++)\n {\n d=o(q);\n q+=d*dir;\n }\n c=max(dot(gn(q),vec3(.1,.1,.0)),.0)+vec4(.3,cos(iTime*.5)*.5+.5,sin(iTime*.5)*.5+.5,1.)*min(length(q-org)*.04,1.);\n\n //Ribbon Color\n if(oa(pp)>ob(pp))c=mix(c,vec4(cos(iTime*.3)*.5+.5,cos(iTime*.2)*.5+.5,sin(iTime*.3)*.5+.5,1.),.3);\n\n //Final Color\n vec4 fcolor = ((c+vec4(f))+(1.-min(pp.y+1.9,1.))*vec4(1.,.8,.7,1.))*min(iTime*.5,1.);\n gl_FragColor=vec4(fcolor.xyz,1.0);\n}"}
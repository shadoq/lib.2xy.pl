{class:mobi.shad.s3lib.gfx.g3d.shaders.SimpleShader$ShaderData,name:glsl_17819.0,type:null,id:null,date:null,author:null,description:null,tags:null,color:false,normal:false,textures:0,vertex:"void main(){\n\tgl_Position = projectionMatrix * modelViewMatrix * a_position;\n}",fragment:"\n// forked from http://iquilezles.untergrund.net/www/articles/rmsierpinski/sierpinski.txt\n// http://blog.hvidtfeldts.net/index.php/2011/08/distance-estimated-3d-fractals-iii-folding-space/\n\n\nvec3 a1 = vec3( 0.0, 0.866, 0.0);\nvec3 a2 = vec3( 0.0, 0.0, 0.433);\nvec3 a3 = vec3(-0.5, 0.0,-0.433);\nvec3 a4 = vec3( 0.5, 0.0,-0.433);\n\n\nfloat length2(in vec3 x )\n{\n    return dot(x,x);\n}\n\n// returns distance, and color id\nvec2 sierpinski( vec3 p )\n{\n    float cid = 0.0;\n    float s = 1.0;\n    float cs = 1.0;\n    for( int n=0; n<4; n++ )\n    {\n        float d, k, h; vec3 c;\n        d = length2(p-a1);             c = a1; h=0.00;\n        k = length2(p-a2); if( k<d ) { c = a2; h=0.25; d=k; }\n        k = length2(p-a3); if( k<d ) { c = a3; h=0.50; d=k; }\n        k = length2(p-a4); if( k<d ) { c = a4; h=0.75; d=k; }\n\n        p = c + 2.0*(p-c);\n        s *= 0.5;\n\n        cid += h*cs; cs *= 0.25;\n    }\n\n    return vec2( (length(p)-0.6)*s, cid );\n}\n\nvec2 map( in vec3 p )\n{\n   vec2 d1 = sierpinski(p);\n   vec2 d2 = vec2( p.y, 0.0 );\n\n   vec2 d = d1;\n   if( d2.x<d.x ) d = d2;\n\n   return d;\n}\n\n// GLSL ES doesn't seem to like loops with conditional break/return...\n#if 0\nvec4 intersect( in vec3 ro, in vec3 rd )\n{\n    float t = 0.0;\n    for(int i=0;i<64;i++)\n    {\n        vec4 h = map(ro + rd*t);\n        if( h.x<0.002 ) \n            return vec4(t,h.yzw);\n        t += h;\n    }\n    return vec4(-1.0);\n}\n#else\nvec2 intersect( in vec3 ro, in vec3 rd )\n{\n    float t = 0.0;\n    vec2 res = vec2(-1.0);\n    for(int i=0;i<48;i++)\n    {\n        vec2 h = map(ro + rd*t);\n        if( h.x<0.002 ) \n        {\n            if( res.x<0.0 ) res = vec2(t,h.y);\n        }\n\n        t += h.x;\n    }\n    return res;\n}\n#endif\n\nvec3 calcNormal(in vec3 pos)\n{\n    vec3  eps = vec3(.0001,0.0,0.0);\n    vec3 nor= vec3(0.0);\n    nor.x = map(pos+eps.xyy).x - map(pos-eps.xyy).x;\n    nor.y = map(pos+eps.yxy).x - map(pos-eps.yxy).x;\n    nor.z = map(pos+eps.yyx).x - map(pos-eps.yyx).x;\n    return normalize(nor);\n}\n\nfloat calcAO( in vec3 p, in vec3 n )\n{\n    float bl = 0.0;\n    float s = 1.0;\n#if 0\n    for( int i=0; i<5; i++ )\n    {\n        float d = 0.8*float(i)/5.0;\n        float h = map(p+n*d).x;\n        bl += max(d-h,0.0)*s;\n        s *= 0.8;\n    }\n    return clamp(1.0-bl,0.0,1.0);\n#else\n\n    for( int i=0; i<10; i++ )\n    {\n        float d = 0.5*float(i)/10.0;\n        float h = map(p+n*d).x;\n        bl += max(d-h,0.0)*s;\n        s *= 0.85;\n    }\n//bl*=0.25;\nbl*=1.4;\n    return clamp(1.0-bl,0.0,1.0);\n\n#endif\n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float maxt, float k )\n{\n    float res = 1.0;\n    float t = mint;\n    for( int i=0; i<64; i++ )\n    {\n        float h = map(ro + rd*t).x;\n        if( res>0.0 && h<0.001 )\n        {\n            res = 0.0;\n        }\n        else if( h>0.0 && res>0.0 )\n        {\n            res = min( res, k*h/t );\n        }\n\n        t += h;\n    }\n    return res;\n}\n\nvoid main(void)\n{\n    vec2 p = -1.0 + 2.0 * gl_FragCoord.xy / iResolution.xy;\n    p.x *= 1.33;\n\n    // light\n    vec3 light = normalize(vec3(1.0,0.8,-0.2));\n\n///    float ctime = 10.5;//time;\n    //float ctime = 21.3;//time;\n    float ctime = iTime;\n    // camera\n    vec3 ro = 0.6*vec3(2.0*cos(0.5*ctime),1.1+0.5*cos(ctime*.23),2.0*sin(0.5*ctime));\n    vec3 ww = normalize(vec3(0.0,0.2,0.0) - ro);\n    vec3 uu = normalize(cross( vec3(0.0,1.0,0.0), ww ));\n    vec3 vv = normalize(cross(ww,uu));\n    vec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n\n    vec3 col = vec3(0.0);\n    vec2 tmat = intersect(ro,rd);\n    if( tmat.x>0.0 )\n    {\n        vec3 pos = ro + tmat.x*rd;\n        vec3 nor = calcNormal(pos);\n\n        float dif1 = max(dot(nor,light),0.0);\n        float dif2 = max(dot(nor,vec3(-light.x,light.y,-light.z)),0.0);\n#if 0\n        // shadow\n        float ldis = 3.0;\n        vec4 shadow = intersect( pos+light*0.01, light );\n        if( shadow.x>0.0 && shadow.x<ldis ) dif1=0.0;\n#else\n       dif1 *= softshadow( pos, light, 0.02, 5.0, 16.0 );\n#endif\n        float ao = calcAO( pos, nor );\n        col  = 1.5*(0.2+0.8*ao)*dif1*vec3(1.0,0.9,0.8);\n        col += 0.3*(0.1+0.9*ao)*dif2*vec3(1.0,1.0,1.0);\n        col += 0.6*(0.1+0.9*ao)*(0.5+0.5*nor.y)*vec3(0.1,0.15,0.2);\n\n        col = sqrt(col);\n\n        vec3 matcol = vec3(\n            0.7+0.3*cos(0.0+6.2831*tmat.y),\n            0.7+0.3*cos(0.7+6.2831*tmat.y),\n            0.7+0.3*cos(0.9+6.2831*tmat.y) );\n        col *= matcol;\n\n        col *= 2.5*exp(-1.0*tmat.x);\n    }\n\n\n    gl_FragColor = vec4(col,1.0);\n}"}
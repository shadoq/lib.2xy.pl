{class:mobi.shad.s3lib.gfx.g3d.shaders.SimpleShader$ShaderData,name:glsl_2165.0,type:null,id:null,date:null,author:null,description:null,tags:null,color:false,normal:false,textures:0,vertex:"void main(){\n\tgl_Position = projectionMatrix * modelViewMatrix * a_position;\n}",fragment:"// \"Sunset on the sea\" Ray Marching (Sphere Tracing) & Ray Tracing experiment by Riccardo Gerosa aka h3r3 \n// Blog: http://www.postronic.org/h3/ G+: https://plus.google.com/u/0/117369239966730363327 Twitter: @h3r3 http://twitter.com/#!/h3r3\n// More information about this shader can be found here: http://www.postronic.org/h3/pid65.html\n// This GLSL shader is based on the work of T Whitted, JC Hart, K Perlin, I Quilez and many others\n// This shader uses a Simplex Noise implementation by and I McEwan, A Arts (more info below)\n// If you modify this code please update this header\n// (modified, alpha=1.0)\n\n\nconst bool USE_MOUSE = true; // Set this to true for God Mode :)\n\nconst float PI = 3.14159265;\nconst float MAX_RAYMARCH_DIST = 150.0;\nconst float MIN_RAYMARCH_DELTA = 0.00015; \nconst float GRADIENT_DELTA = 0.015;\nfloat waveHeight1 = 0.005;\nfloat waveHeight2 = 0.004;\nfloat waveHeight3 = 0.001;\n\n// --------------------- START of SIMPLEX NOISE\n//\n// Description : Array and textureless GLSL 2D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n// \n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat snoise(vec2 v)\n  {\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n// First corner\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n// Other corners\n  vec2 i1;\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n  //i1.y = 1.0 - i1.x;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\n  // x1 = x0 - i1 + 1.0 * C.xx ;\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n// Permutations\n  i = mod289(i); // Avoid truncation effects in permutation\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n        + i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n// Normalise gradients implicitly by scaling m\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n// Compute final noise value at P\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\n// --------------------- END of SIMPLEX NOISE\n\n\nfloat map(vec3 p) {\n    return p.y + (0.5 + waveHeight1 + waveHeight2 + waveHeight3) \n        + snoise(vec2(p.x + iTime * 0.4, p.z + iTime * 0.6)) * waveHeight1\n        + snoise(vec2(p.x * 1.6 - iTime * 0.4, p.z * 1.7 - iTime * 0.6)) * waveHeight2\n        + snoise(vec2(p.x * 6.6 - iTime * 1.0, p.z * 2.7 + iTime * 1.176)) * waveHeight3;\n}\n\nvec3 gradientNormalFast(vec3 p, float map_p) {\n    return normalize(vec3(\n        map_p - map(p - vec3(GRADIENT_DELTA, 0, 0)),\n        map_p - map(p - vec3(0, GRADIENT_DELTA, 0)),\n        map_p - map(p - vec3(0, 0, GRADIENT_DELTA))));\n}\n\nfloat intersect(vec3 p, vec3 ray_dir, out float map_p, out int iterations) {\n    iterations = 0;\n    if (ray_dir.y >= 0.0) { return -1.0; } // to see the sea you have to look down\n    \n    float zHigh = - 0.5;\n    float zLow = - 0.5 - ((waveHeight1 + waveHeight2 + waveHeight3) * 2.0);\n    float distMin = (zHigh - p.y) / ray_dir.y;\n    float distMax = (zLow - p.y) / ray_dir.y;\n\n    float distMid = distMin;\n    for (int i = 0; i < 50; i++) {\n        iterations++;\n        distMid += max(0.05 + float(i) * 0.002, map_p);\n        map_p = map(p + ray_dir * distMid);\n        if (map_p > 0.0) { \n            distMin = distMid + map_p;\n        } else { \n            distMax = distMid + map_p;\n            // interval found, now bisect inside it\n            for (int i = 0; i < 10; i++) {\n                iterations++;\n                distMid = distMin + (distMax - distMin) / 2.0;\n                map_p = map(p + ray_dir * distMid);\n                if (abs(map_p) < MIN_RAYMARCH_DELTA) return distMid;\n                if (map_p > 0.0) {\n                    distMin = distMid + map_p;\n                } else {\n                    distMax = distMid + map_p;\n                }\n            }\n            return distMid;\n        }\n    }\n    return distMin;\n}\n\nvoid main( void ) {\n    float waveHeight = USE_MOUSE ? iMouse.x * 5.0 : cos(iTime * 0.03) * 1.2 + 1.6;\n    waveHeight1 *= waveHeight;\n    waveHeight2 *= waveHeight;\n    waveHeight3 *= waveHeight;\n    \n    vec2 position = vec2((gl_FragCoord.x - iResolution.x / 2.0) / iResolution.y, (gl_FragCoord.y - iResolution.y / 2.0) / iResolution.y);\n    vec3 ray_start = vec3(0, 0.2, -2);\n    vec3 ray_dir = normalize(vec3(position,0) - ray_start);\n    ray_start.y = cos(iTime * 0.5) * 0.2 - 0.25 + sin(iTime * 2.0) * 0.05;\n    \n    const float dayspeed = 0.04;\n    float subtime = max(-0.16, sin(iTime * dayspeed) * 0.2);\n    float middayperc = USE_MOUSE ? iMouse.y * 0.3 - 0.15 : max(0.0, sin(subtime));\n    vec3 light1_pos = vec3(0.0, middayperc * 200.0, USE_MOUSE ? 200.0 : cos(subtime * dayspeed) * 200.0);\n    float sunperc = pow(max(0.0, min(dot(ray_dir, normalize(light1_pos)), 1.0)), 190.0 + max(0.0,light1_pos.y * 4.3));\n    vec3 suncolor = (1.0 - max(0.0, middayperc)) * vec3(1.5, 1.2, middayperc + 0.5) + max(0.0, middayperc) * vec3(1.0, 1.0, 1.0) * 4.0;\n    vec3 skycolor = vec3(middayperc + 0.8, middayperc + 0.7, middayperc + 0.5);\n    vec3 skycolor_now = suncolor * sunperc + (skycolor * (middayperc * 1.6 + 0.5)) * (1.0 - sunperc);\n    vec4 color; \n    float map_p;\n    int iterations;\n    float dist = intersect(ray_start, ray_dir, map_p, iterations);\n    if (dist > 0.0) {\n        vec3 p = ray_start + ray_dir * dist;\n        vec3 light1_dir = normalize(light1_pos - p);\n            vec3 n = gradientNormalFast(p, map_p);\n        vec3 ambient = skycolor_now * 0.1;\n            vec3 diffuse1 = vec3(1.1, 1.1, 0.6) * max(0.0, dot(light1_dir, n)  * 2.8);\n        vec3 r = reflect(light1_dir, n);\n        vec3 specular1 = vec3(1.5, 1.2, 0.6) * (0.8 * pow(max(0.0, dot(r, ray_dir)), 200.0));       \n        float fog = min(max(p.z * 0.07, 0.0), 1.0);\n            color.rgb = (vec3(0.6,0.6,1.0) * diffuse1 + specular1 + ambient)  * (1.0 - fog) + skycolor_now * fog;\n        } else {\n            color.rgb = skycolor_now.rgb;\n        }\n    gl_FragColor = vec4(color.rgb, 1.0);\n}"}
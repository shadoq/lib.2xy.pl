{class:mobi.shad.s3lib.gfx.g3d.shaders.SimpleShader$ShaderData,name:raymarch_3_texture,type:null,id:null,date:null,author:null,description:null,tags:null,color:false,normal:false,textures:0,vertex:"void main(){\n\tgl_Position = projectionMatrix * modelViewMatrix * a_position;\n}",fragment:"\n//\n// Simple Textures 2D Example ...\n//\n\nvec3 plasma(vec2 pos) {\n    pos=floor(pos/0.1)*0.2;\n    return vec3(\n        sin(pos.x * 1.3 + iTime * 5.4) + cos(pos.x * 1.7 + iTime * 5.2), \n        sin(pos.x * 2.3 + iTime * 2.2) + cos(pos.y * 1.3 + iTime * 3.2),\n        sin(pos.x * 1.4 + iTime * 6.1) + cos(pos.y * 1.4 + iTime * 3.2)\n    );\n}\n\nvec3 noise(vec2 pos) {\n    return normalize(vec3(\n        sin(pos.x * 5.0) + cos(pos.y * 5.0) * cos(pos.x * 3.14), \n        cos(sin(pos.y * 4.0) + pos.x * 13.37) + cos(pos.y * 13.52) * sin(pos.x * 64. + pos.y * 42.),\n        cos(pos.x * 100.) * sin(pos.y * 128.0) + sin(pos.y * 16.0)\n    ));\n}\n\nfloat rand(vec2 p){\n    return fract(sin(dot(p.xy ,vec2(23.9898,78.233))) * 345234.2343);\n}\n\nfloat rand(vec2 p, float seed){\n    return fract(sin(dot(p.xy ,vec2(seed,seed*32.43))) * 345234.2343);\n}\n\nvec2 rand(vec2 p, vec2 seed)\n{\n    return fract(dot(p, vec2(sin(p.x)*seed.x, cos(p.y)*seed.y)));\n}\n\nvec2 rand2(vec2 p)\n{\n    p = fract(p * vec2(5.3983, 5.4427));\n    p += dot(p.yx, p.xy +  vec2(21.5351, 14.3137));\n    return fract(vec2(p.x * p.y * 95.4337, p.x * p.y * 97.597));\n}\n\nvec3 checkerboard(vec2 p)\n{\n    int x = int(p.x * 10);\n    int y = int(p.y * 10);\n    int sum = x + y;\n    \n    if (int(mod(float(sum), float(2))) == 0)\n        return vec3(1.0, 1.0, 1.0);\n    else\n        return vec3(0.0, 0.0, 0.0);\n}\n\nvec3 textTest1(vec2 pos){\n    vec2 q = mod(sin(pos * 3.141592 * 2.0) - 0.5, 2.0) - 1.0;\n    float color=0.;\n    float d = length(q);\n    float w1 = sin(iTime + 5.0 * d * 3.141592) * 0.5 + 0.5;\n    float w2 = sin(6.0 * d * 3.141592) * 0.5 + 0.5;\n    color = w1 + w2;\n    return vec3( color*0.5, cos( color + iTime / 3.0 )*0.85, sin( color + iTime / 3.0 ) * 0.75 );    \n}\n\nvec3 textTest2(vec2 pos){\n    vec2 q = mod(pos, 0.1) - 0.05;\n    float d = length(q * sin(iTime * 3.0) * 20.0) - length(pos);\n    float color = sin(d * 3.141592);\n    return vec3( color*0.5, cos( color + iTime / 3.0 )*0.85, sin( color + iTime / 3.0 ) * 0.75 );    \n}\n\nvec3 textTest3(vec2 pos){\n\n    float ang = atan(pos.y,pos.x);\n    float dist = length(pos);\n    ang += 1.0/dist+iTime; \n    ang = mod(ang*10.0, 3.1415926535); \n    float color = sin(ang) * dist;        \n    return vec3( color*0.5, cos( color + iTime / 3.0 )*0.85, sin( color + iTime / 3.0 ) * 0.75 );    \n}\n\nvec3 textTest4(vec2 pos){\n\n    float color = mod(fract(sin(dot(pos + iTime, vec2(12.9898,100.233))) * 43758.5453), 1.0) * 0.0;\n    color += .8 * (1. - (length((pos - 0.3) * vec2(0.5, 1.)) * 8.)); \n    color *= 1.8 * (1. - (length((pos - 0.4) * vec2(0.76, 1.)) * (2.0+sin(iTime*1.0)*2.0)));\n    \nreturn vec3( color*0.5, cos( color + iTime / 3.0 )*0.85, sin( color + iTime / 3.0 ) * 0.75 );    \n}\n\n\nvoid main() {\n    vec2 pos=(gl_FragCoord.xy * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 uv=gl_FragCoord.xy/iResolution.xy;\n    vec3 outColor=vec3(0.0, 0.0, 0.0);\n\n\n    int region=int(uv.x*4.0);\n    if (uv.y<0.5){\n        region=region+4;\n    }\n    \n    if (region==0){\n        float rand=rand(pos);\n        outColor=vec3(rand, rand, rand);\n    } \n    if (region==1){\n        outColor=plasma(pos);\n    }\n    if (region==2){\n        outColor=noise(pos);\n    }\n    if (region==3){\n        outColor=checkerboard(pos);\n    }\n    if (region==4){\n        outColor=textTest1(pos);\n    }\n    if (region==5){\n        outColor=textTest2(pos);\n    }\n    if (region==6){\n        outColor=textTest3(pos);\n    }\n    if (region==7){\n        outColor=textTest4(pos);\n    }\n    \n    gl_FragColor=vec4(outColor.r, outColor.g, outColor.b, 1.0);\n}"}
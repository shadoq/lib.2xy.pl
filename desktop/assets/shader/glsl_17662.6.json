{class:mobi.shad.s3lib.gfx.g3d.shaders.SimpleShader$ShaderData,name:glsl_17662.6,type:null,id:null,date:null,author:null,description:null,tags:null,color:false,normal:false,textures:0,vertex:"void main(){\n\tgl_Position = projectionMatrix * modelViewMatrix * a_position;\n}",fragment:"#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n\nfloat pi = atan(1.)*4.;\nfloat tau = pi*2.0;\n\nvec3 HLine(float start,float end,vec2 p)\n{\n    float bounds = max(0.0,step(p.x,start)-step(p.x,end));\n    float width = end-start;\n    \n    p.x = (p.x - start)/width;\n    \n    vec3 color = vec3(step(sin(p.x*4.0*pi)*sin(p.y*8.0*pi),0.0)*0.5+0.5)*p.x;\n    \n    return color*bounds;\n}\n\nvoid main( void ) {\n\n    vec2 res = vec2(iResolution.x/iResolution.y,1.0);\n    \n    vec2 p = ( gl_FragCoord.xy / iResolution.y ) - res/2.0;\n    \n    float ang = iTime*1.+p.y*sin(iTime)*3.;\n    \n    float x1 = sin(ang + tau * 0.00) * 0.2;\n    float x2 = sin(ang + tau * 0.25) * 0.2;\n    float x3 = sin(ang + tau * 0.50) * 0.2;\n    float x4 = sin(ang + tau * 0.75) * 0.2;\n    \n    vec3 col = vec3(0.0);\n    col += HLine(x1,x2,p) * vec3(1,0,0);\n    col += HLine(x2,x3,p) * vec3(0,1,0);\n    col += HLine(x3,x4,p) * vec3(0,0,1);\n    col += HLine(x4,x1,p) * vec3(1,1,0);\n    \n    gl_FragColor = vec4(col, 1.0);\n\n}"}